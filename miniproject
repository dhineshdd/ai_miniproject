import tkinter as tk
from tkinter import messagebox


def dfs_block_world(start, goal):
    stack = [(start, [])]
    visited = set()

    def stringify(state):
        return tuple((block, tuple(stack)) for block, stack in sorted(state.items()))

    while stack:
        current, path = stack.pop()
        state_key = stringify(current)
        if state_key in visited:
            continue
        visited.add(state_key)
        path = path + [current]
        if current == goal:
            return path

   
        successors = []
        blocks = list(current.keys())
        for block in blocks:
            stack_from = current[block]
            if not stack_from:
                continue
            moving = stack_from[-1]

            
            if all(moving != s[-1] for k, s in current.items() if s and k != block):
                new_state = {k: list(v) for k, v in current.items()}
                new_state[block].pop()
                new_state[moving] = []
                successors.append(new_state)

      
            for dest in blocks:
                if dest != block:
                    new_state = {k: list(v) for k, v in current.items()}
                    new_state[block].pop()
                    new_state[dest].append(moving)
                    successors.append(new_state)

        for state in successors:
            if stringify(state) not in visited:
                stack.append((state, path))

    return None


class BlockWorldApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Block World Problem")

        tk.Label(root, text="Initial State (e.g., A:B,C B: C:)").grid(row=0, column=0)
        self.init_entry = tk.Entry(root, width=40)
        self.init_entry.grid(row=0, column=1)

        tk.Label(root, text="Goal State (e.g., A: B:C C:B)").grid(row=1, column=0)
        self.goal_entry = tk.Entry(root, width=40)
        self.goal_entry.grid(row=1, column=1)

        self.solve_button = tk.Button(root, text="Solve", command=self.solve)
        self.solve_button.grid(row=2, column=0, columnspan=2)

        self.result_text = tk.Text(root, height=15, width=60)
        self.result_text.grid(row=3, column=0, columnspan=2)

    def parse_state(self, input_text):
        try:
            state = {}
            for part in input_text.strip().split():
                if ":" not in part:
                    return None
                k, v = part.split(":")
                state[k.strip()] = list(filter(None, map(str.strip, v.split(',')))) if v else []
            return state
        except:
            return None

    def solve(self):
        init_state = self.parse_state(self.init_entry.get())
        goal_state = self.parse_state(self.goal_entry.get())

        if init_state is None or goal_state is None:
            messagebox.showerror("Input Error", "Invalid state format.")
            return

        self.result_text.delete(1.0, tk.END)
        result = dfs_block_world(init_state, goal_state)

        if not result:
            self.result_text.insert(tk.END, "No solution found.")
        else:
            self.result_text.insert(tk.END, "Steps to reach the goal:\n")
            for i, state in enumerate(result):
                self.result_text.insert(tk.END, f"Step {i}:\n")
                for k in sorted(state.keys()):
                    self.result_text.insert(tk.END, f" {k}: {','.join(state[k])}\n")
                self.result_text.insert(tk.END, "\n")


if __name__ == "__main__":
    root = tk.Tk()
    app = BlockWorldApp(root)
    root.mainloop()
